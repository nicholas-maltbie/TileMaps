{
  "api/nickmaltbie.TileMaps.Common.Heap-2.html": {
    "href": "api/nickmaltbie.TileMaps.Common.Heap-2.html",
    "title": "Class Heap<K, V> | Tile Maps Documentation",
    "keywords": "Class Heap<K, V> Heap data structure that can store any given item for a specific value. Supports storing a generic set of elements by a given key value where the element with the smallest value is stored at the root of the tree. This is an implementation of the min heap structure via an array. The array can be specified size when starting up but will grow if more elements are added. Inheritance Object Heap<K, V> Namespace : nickmaltbie.TileMaps.Common Assembly : cs.temp.dll.dll Syntax public class Heap<K, V> where K : IComparable Type Parameters Name Description K Key used to sort elements, must implement IComparable K. V Type of data stored in the heap. Constructors Heap() Create an instance of a Heap with an initial capacity of 10. Declaration public Heap() Heap(Int32) Create an instance of a Heap with an initial capacity. Declaration public Heap(int initialCapacity) Parameters Type Name Description Int32 initialCapacity Starting capacity of the heap (can grow larger in future). Properties Count Get the current count of elements stored in the heap Declaration public int Count { get; } Property Value Type Description Int32 Methods Add(K, V) Adds an element to the heap for a given key. Declaration public void Add(K key, V value) Parameters Type Name Description K key Key for the given element in the heap. V value Value for the given key. EnumerateElements() Enumerates the elements in the heap in a partially sorted order in which they are stored. Declaration public IEnumerable<V> EnumerateElements() Returns Type Description IEnumerable <V> An enumerable list of elements stored in the heap in a partially sorted order. Peek() Look at the first element stored in the heap. Declaration public V Peek() Returns Type Description V The value with the smallest key value stored at the base of the heap. Pop() Dequeues the element at the root of the heap with the minimum key value and then ensures the heap has a valid structure. This will take at most log_2(n) time where n is the size of the heap. Declaration public V Pop() Returns Type Description V The element stored at the base of the heap."
  },
  "api/nickmaltbie.TileMaps.Common.html": {
    "href": "api/nickmaltbie.TileMaps.Common.html",
    "title": "Namespace nickmaltbie.TileMaps.Common | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.TileMaps.Common Classes Heap<K, V> Heap data structure that can store any given item for a specific value. Supports storing a generic set of elements by a given key value where the element with the smallest value is stored at the root of the tree. This is an implementation of the min heap structure via an array. The array can be specified size when starting up but will grow if more elements are added. Interfaces IBlockableTileMap<K, V> Tile map that supports blocking spaces within the map. Blocked locations are still within the map but can be ignored when calculating neighbors of a tile as they do not show up in the neighbors of a tile. IGraph<V> A generic graph which represents a collection of connected vertices. ITileMap<K, V> A tile map for a given coordinate system that contains specific values. IWorldGrid<K, V> World grid to control and load a TileMap into world space."
  },
  "api/nickmaltbie.TileMaps.Common.IBlockableTileMap-2.html": {
    "href": "api/nickmaltbie.TileMaps.Common.IBlockableTileMap-2.html",
    "title": "Interface IBlockableTileMap<K, V> | Tile Maps Documentation",
    "keywords": "Interface IBlockableTileMap<K, V> Tile map that supports blocking spaces within the map. Blocked locations are still within the map but can be ignored when calculating neighbors of a tile as they do not show up in the neighbors of a tile. Inherited Members ITileMap<K, V>.Item[K] IGraph<K>.GetNeighbors(K) IGraph<K>.Degree(K) IGraph<K>.Contains(K) IGraph<K>.Clear() Namespace : nickmaltbie.TileMaps.Common Assembly : cs.temp.dll.dll Syntax public interface IBlockableTileMap<K, V> : ITileMap<K, V>, IGraph<K> Type Parameters Name Description K Coordinate system for the map. V Values held in the map. Methods Block(K) Block a given location within the tile map. Declaration void Block(K loc) Parameters Type Name Description K loc Location within the tile map to block. IsBlocked(K) Check if a location within the tile map is blocked. Declaration bool IsBlocked(K loc) Parameters Type Name Description K loc Location within the tile map to check. Returns Type Description Boolean True if the tile is blocked, false otherwise. ResetBlocks() Reset any blocked tile in the grid. Declaration void ResetBlocks() Unblock(K) Unblocks state of a tile within the map. Declaration void Unblock(K loc) Parameters Type Name Description K loc Location within the tile map to unblock."
  },
  "api/nickmaltbie.TileMaps.Common.IGraph-1.html": {
    "href": "api/nickmaltbie.TileMaps.Common.IGraph-1.html",
    "title": "Interface IGraph<V> | Tile Maps Documentation",
    "keywords": "Interface IGraph<V> A generic graph which represents a collection of connected vertices. Namespace : nickmaltbie.TileMaps.Common Assembly : cs.temp.dll.dll Syntax public interface IGraph<V> Type Parameters Name Description V Types of vertices within the graph. Methods Clear() Clear all vertices from the tile graph. Declaration void Clear() Contains(V) Check if a given vertex is contained within the graph. Declaration bool Contains(V vertex) Parameters Type Name Description V vertex Vertex to check if it is within bounds. Returns Type Description Boolean True if the vertex is in the graph, false otherwise. Degree(V) Gets the number of neighbors (or degree) of a vertex within the graph. Declaration int Degree(V vertex) Parameters Type Name Description V vertex Vertex on the map to compute neighbors for. Returns Type Description Int32 The number of neighbors that a given vertex has. GetNeighbors(V) Get the neighbors of a given vertex within the graph. Declaration IEnumerable<V> GetNeighbors(V vertex) Parameters Type Name Description V vertex Vertex on the map to find neighbors of. Returns Type Description IEnumerable <V> An enumerable list of all the neighbors of a given vertex."
  },
  "api/nickmaltbie.TileMaps.Common.ITileMap-2.html": {
    "href": "api/nickmaltbie.TileMaps.Common.ITileMap-2.html",
    "title": "Interface ITileMap<K, V> | Tile Maps Documentation",
    "keywords": "Interface ITileMap<K, V> A tile map for a given coordinate system that contains specific values. Inherited Members IGraph<K>.GetNeighbors(K) IGraph<K>.Degree(K) IGraph<K>.Contains(K) IGraph<K>.Clear() Namespace : nickmaltbie.TileMaps.Common Assembly : cs.temp.dll.dll Syntax public interface ITileMap<K, V> : IGraph<K> Type Parameters Name Description K Coordinate system for the map. V Values held in the map. Properties Item[K] Modify the value saved at a specific location within the map. Declaration V this[K loc] { get; set; } Parameters Type Name Description K loc Property Value Type Description V"
  },
  "api/nickmaltbie.TileMaps.Common.IWorldGrid-2.html": {
    "href": "api/nickmaltbie.TileMaps.Common.IWorldGrid-2.html",
    "title": "Interface IWorldGrid<K, V> | Tile Maps Documentation",
    "keywords": "Interface IWorldGrid<K, V> World grid to control and load a TileMap into world space. Namespace : nickmaltbie.TileMaps.Common Assembly : cs.temp.dll.dll Syntax public interface IWorldGrid<K, V> Type Parameters Name Description K Coordinate system for the map. V Values held in the map. Methods GetTileMap() Gets the tile map associated with this world grid. Declaration ITileMap<K, V> GetTileMap() Returns Type Description ITileMap <K, V> GetWorldPosition(K) Gets the world position of a given coordinate within the tile map. Declaration Vector3 GetWorldPosition(K loc) Parameters Type Name Description K loc Location within the tile map to lookup. Returns Type Description Vector3 Position in world space of this location in the tile map. GetWorldRotation(K) Gets the world rotation of a given coordinate within the tile map. Declaration Quaternion GetWorldRotation(K loc) Parameters Type Name Description K loc Rotation within the tile map to lookup. Returns Type Description Quaternion Rotation in world space of this location in the tile map."
  },
  "api/nickmaltbie.TileMaps.Data.DemoMaterials.html": {
    "href": "api/nickmaltbie.TileMaps.Data.DemoMaterials.html",
    "title": "Class DemoMaterials | Tile Maps Documentation",
    "keywords": "Class DemoMaterials Demo materials for colors and drawing on the map. Inheritance Object DemoMaterials Namespace : nickmaltbie.TileMaps.Data Assembly : cs.temp.dll.dll Syntax public class DemoMaterials : ScriptableObject Fields blockedMaterial Material associated with the blocked tile state. Declaration public Material blockedMaterial Field Value Type Description Material defaultMaterial Default material associated with a tile. Declaration public Material defaultMaterial Field Value Type Description Material pathArrowMaterial Material for default added path arrows. Declaration public Material pathArrowMaterial Field Value Type Description Material pathArrowSelectedMaterial Material associated with a selected path arrow. Declaration public Material pathArrowSelectedMaterial Field Value Type Description Material pathMaterial Material associated with tiles that are part of the final path. Declaration public Material pathMaterial Field Value Type Description Material queuedColorGradient Gradient of colors for queued tiles. Declaration public Gradient queuedColorGradient Field Value Type Description Gradient queuedMaterial Material associated with the queued tile state. Declaration public Material queuedMaterial Field Value Type Description Material searchedMaterial Material associated with the searched tile state. Declaration public Material searchedMaterial Field Value Type Description Material selectedMaterial Material associated with the selected tile. Declaration public Material selectedMaterial Field Value Type Description Material"
  },
  "api/nickmaltbie.TileMaps.Data.html": {
    "href": "api/nickmaltbie.TileMaps.Data.html",
    "title": "Namespace nickmaltbie.TileMaps.Data | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.TileMaps.Data Classes DemoMaterials Demo materials for colors and drawing on the map."
  },
  "api/nickmaltbie.TileMaps.Example.AbstractExampleGrid.html": {
    "href": "api/nickmaltbie.TileMaps.Example.AbstractExampleGrid.html",
    "title": "Class AbstractExampleGrid | Tile Maps Documentation",
    "keywords": "Class AbstractExampleGrid Example grid of spawned prefabs. Inheritance Object AbstractExampleGrid ExampleHexGrid ExampleSquareGrid Namespace : nickmaltbie.TileMaps.Example Assembly : cs.temp.dll.dll Syntax public abstract class AbstractExampleGrid : MonoBehaviour Fields arrowOffset Vertical offset between the board and arrows drawn. Declaration public float arrowOffset Field Value Type Description Single arrowPrefab Arrow to spawn between hexes Declaration public GameObject arrowPrefab Field Value Type Description GameObject demoMaterials Demo materials for labeling the graph. Declaration public DemoMaterials demoMaterials Field Value Type Description DemoMaterials OnPlayModeChange Event that is invoked whenever the play mode changes. Declaration public EventHandler<PathfindingAnimationState> OnPlayModeChange Field Value Type Description EventHandler < PathfindingAnimationState > path Currently found path. Declaration protected List<Vector2Int> path Field Value Type Description List < Vector2Int > pathfindingSelectionState Toggle of current state in pathfinding. Declaration protected PathfindingSelectionState pathfindingSelectionState Field Value Type Description PathfindingSelectionState priorityDecay Decay of color when displaying priority of next tile to select. Declaration public float priorityDecay Field Value Type Description Single searchMode Type of mode for searching for the Declaration public PathMode searchMode Field Value Type Description PathMode selected1 First selected element in path. Declaration protected Nullable<Vector2Int> selected1 Field Value Type Description Nullable < Vector2Int > selected2 Second selected element in path. Declaration protected Nullable<Vector2Int> selected2 Field Value Type Description Nullable < Vector2Int > stepDelay Step delay between updates of pathfinding rendering. Declaration public float stepDelay Field Value Type Description Single Properties AllowInputs Do we allow the player to input actions. Declaration public bool AllowInputs { get; set; } Property Value Type Description Boolean CurrentMode Current mode of pathfinding animation. Declaration public PathfindingAnimationState CurrentMode { get; set; } Property Value Type Description PathfindingAnimationState PrimaryAction Get the mode selected for the primary button action. Declaration public BoardAction PrimaryAction { get; } Property Value Type Description BoardAction Current mode selected for primary button SecondaryAction Get the mode selected for the primary button action. Declaration public BoardAction SecondaryAction { get; } Property Value Type Description BoardAction Current mode selected for primary button TilePrefab Tile map prefab object for creating hexes. Declaration public GameObject TilePrefab { get; } Property Value Type Description GameObject WorldGrid World grid associated with this example. Declaration public IWorldGrid<Vector2Int, GameObject> WorldGrid { get; } Property Value Type Description IWorldGrid < Vector2Int , GameObject > Methods BlockTile(Vector2Int) Declaration public void BlockTile(Vector2Int location) Parameters Type Name Description Vector2Int location ClearBlockedTiles() clear out any blocked tile in the map. Declaration public void ClearBlockedTiles() ClearPath() Reset the path the player is currently animating/working on. Declaration public void ClearPath() CreateArrow(Vector2Int, Vector2Int) Create an arrow on the screen for highlighting the path Declaration public GameObject CreateArrow(Vector2Int start, Vector2Int end) Parameters Type Name Description Vector2Int start Source position of the arrow. Vector2Int end Destination position of the arrow. Returns Type Description GameObject Game object representing the created arrow. CreateGridMap() Function to create a world grid Declaration protected abstract (IWorldGrid<Vector2Int, GameObject>, IBlockableTileMap<Vector2Int, GameObject>) CreateGridMap() Returns Type Description (T1, T2) < IWorldGrid < Vector2Int , GameObject >, IBlockableTileMap < Vector2Int , GameObject >> The created world grid and associated blockable tile map for that grid. DeleteArrow(Vector2Int, Vector2Int) Delete an arrow for a given location in the grid. Declaration public bool DeleteArrow(Vector2Int start, Vector2Int end) Parameters Type Name Description Vector2Int start Source position of the arrow. Vector2Int end Destination position of the arrow. Returns Type Description Boolean True if an arrow was removed form that position, false otherwise. DoOnValidPres(Action<Vector2Int>) Do an action if a valid tile is pressed. Declaration public void DoOnValidPres(Action<Vector2Int> action) Parameters Type Name Description Action < Vector2Int > action Action to perform for a given tile if the tile pressed is valid. DrawPath() Draw the path based on the search mode selected for this demonstration. Declaration public void DrawPath() DrawPathVisualization(IEnumerable<PathfindingStep<Vector2Int>>) A coroutine to start drawing a path visualization on the screen for a given set of steps. Declaration public IEnumerator DrawPathVisualization(IEnumerable<PathfindingStep<Vector2Int>> steps) Parameters Type Name Description IEnumerable < PathfindingStep < Vector2Int >> steps Steps associated with the path visualization. Returns Type Description IEnumerator IEnumerator representing the delays between each step of the path rendering. GetSelectedPosition() Get the currently selected position based on the cursor position. Declaration public Vector2Int? GetSelectedPosition() Returns Type Description Nullable < Vector2Int > Returns the position of the selected element or null if no valid element is clicked. GetTileState(Vector2Int) Gets the render state of a tile based on its current configuration and board state. Declaration public TileState GetTileState(Vector2Int loc) Parameters Type Name Description Vector2Int loc Location within the hex grid. Returns Type Description TileState Current state of the tile in the board. OnDisable() Cleanup the tile map when this object is disabled. Declaration public void OnDisable() OnEnable() Setup the example grid upon enabling. Declaration public void OnEnable() PathfindingStep() Perform one step of the pathfinding animation. Declaration public void PathfindingStep() ResetBlocked() Reset the blocked tiles. Declaration public void ResetBlocked() ResetBoard() Resets any visuals drawn on the board currently. Declaration public void ResetBoard() ResetProgress() Reset the pathfinding progress. Declaration public void ResetProgress() SelectTile(Vector2Int) Declaration public void SelectTile(Vector2Int location) Parameters Type Name Description Vector2Int location SetPrimaryAction(BoardAction) Toggle primary and secondary actions for board interactions. Declaration public void SetPrimaryAction(BoardAction primaryAction) Parameters Type Name Description BoardAction primaryAction ShouldWait() Is there a reason to wait a step. Declaration public bool ShouldWait() Returns Type Description Boolean True if there is some delay needed, false otherwise. Start() Setup basic actions for the game. Declaration public void Start() ToggleAction() Toggle primary and secondary actions. Declaration public void ToggleAction() TogglePlay() Toggle the current animation pathfinding state. Declaration public void TogglePlay() UpdatePathWeight(PathfindingStep<Vector2Int>) Update the path weight from a given pathfinding step. Declaration public void UpdatePathWeight(PathfindingStep<Vector2Int> step) Parameters Type Name Description PathfindingStep < Vector2Int > step Pathfinding step. UpdateTileColor(Vector2Int) Update the color of a tile within the grid. Declaration public void UpdateTileColor(Vector2Int loc) Parameters Type Name Description Vector2Int loc Location to update within the grid. WaitStep() Wait for the next step in the sequence to be ready. Declaration public IEnumerator WaitStep() Returns Type Description IEnumerator Enumerator which indicates when the next step is ready."
  },
  "api/nickmaltbie.TileMaps.Example.BoardAction.html": {
    "href": "api/nickmaltbie.TileMaps.Example.BoardAction.html",
    "title": "Enum BoardAction | Tile Maps Documentation",
    "keywords": "Enum BoardAction Action for main click to toggle between blocking tiles on the map or selecting for pathfinding. Namespace : nickmaltbie.TileMaps.Example Assembly : cs.temp.dll.dll Syntax public enum BoardAction Fields Name Description BlockTile SelectPath"
  },
  "api/nickmaltbie.TileMaps.Example.Coord.html": {
    "href": "api/nickmaltbie.TileMaps.Example.Coord.html",
    "title": "Class Coord | Tile Maps Documentation",
    "keywords": "Class Coord Coordinate of an element referenced back to the grid it belongs to. Inheritance Object Coord Namespace : nickmaltbie.TileMaps.Example Assembly : cs.temp.dll.dll Syntax public class Coord : MonoBehaviour Fields coord Corrdinate of element within a grid. Declaration public Vector2Int coord Field Value Type Description Vector2Int"
  },
  "api/nickmaltbie.TileMaps.Example.ExampleHexGrid.html": {
    "href": "api/nickmaltbie.TileMaps.Example.ExampleHexGrid.html",
    "title": "Class ExampleHexGrid | Tile Maps Documentation",
    "keywords": "Class ExampleHexGrid Example hexagon grid of spawned prefabs for testing purposes. Inheritance Object AbstractExampleGrid ExampleHexGrid Inherited Members AbstractExampleGrid.searchMode AbstractExampleGrid.selected1 AbstractExampleGrid.selected2 AbstractExampleGrid.pathfindingSelectionState AbstractExampleGrid.path AbstractExampleGrid.stepDelay AbstractExampleGrid.arrowOffset AbstractExampleGrid.demoMaterials AbstractExampleGrid.priorityDecay AbstractExampleGrid.arrowPrefab AbstractExampleGrid.PrimaryAction AbstractExampleGrid.SecondaryAction AbstractExampleGrid.ToggleAction() AbstractExampleGrid.WorldGrid AbstractExampleGrid.TilePrefab AbstractExampleGrid.CurrentMode AbstractExampleGrid.AllowInputs AbstractExampleGrid.OnPlayModeChange AbstractExampleGrid.PathfindingStep() AbstractExampleGrid.TogglePlay() AbstractExampleGrid.ResetBlocked() AbstractExampleGrid.CreateArrow(Vector2Int, Vector2Int) AbstractExampleGrid.DeleteArrow(Vector2Int, Vector2Int) AbstractExampleGrid.SetPrimaryAction(BoardAction) AbstractExampleGrid.Start() AbstractExampleGrid.DoOnValidPres(Action<Vector2Int>) AbstractExampleGrid.OnEnable() AbstractExampleGrid.OnDisable() AbstractExampleGrid.BlockTile(Vector2Int) AbstractExampleGrid.GetSelectedPosition() AbstractExampleGrid.ResetProgress() AbstractExampleGrid.ClearPath() AbstractExampleGrid.ClearBlockedTiles() AbstractExampleGrid.ResetBoard() AbstractExampleGrid.SelectTile(Vector2Int) AbstractExampleGrid.UpdatePathWeight(PathfindingStep<Vector2Int>) AbstractExampleGrid.ShouldWait() AbstractExampleGrid.WaitStep() AbstractExampleGrid.DrawPathVisualization(IEnumerable<PathfindingStep<Vector2Int>>) AbstractExampleGrid.DrawPath() AbstractExampleGrid.UpdateTileColor(Vector2Int) AbstractExampleGrid.GetTileState(Vector2Int) Namespace : nickmaltbie.TileMaps.Example Assembly : cs.temp.dll.dll Syntax public class ExampleHexGrid : AbstractExampleGrid Methods CreateGridMap() Function to create a world grid Declaration protected override (IWorldGrid<Vector2Int, GameObject>, IBlockableTileMap<Vector2Int, GameObject>) CreateGridMap() Returns Type Description (T1, T2) < IWorldGrid < Vector2Int , GameObject >, IBlockableTileMap < Vector2Int , GameObject >> The created world grid and associated blockable tile map for that grid. Overrides AbstractExampleGrid.CreateGridMap()"
  },
  "api/nickmaltbie.TileMaps.Example.ExampleSquareGrid.html": {
    "href": "api/nickmaltbie.TileMaps.Example.ExampleSquareGrid.html",
    "title": "Class ExampleSquareGrid | Tile Maps Documentation",
    "keywords": "Class ExampleSquareGrid Example square grid of spawned prefabs for testing purposes. Inheritance Object AbstractExampleGrid ExampleSquareGrid Inherited Members AbstractExampleGrid.searchMode AbstractExampleGrid.selected1 AbstractExampleGrid.selected2 AbstractExampleGrid.pathfindingSelectionState AbstractExampleGrid.path AbstractExampleGrid.stepDelay AbstractExampleGrid.arrowOffset AbstractExampleGrid.demoMaterials AbstractExampleGrid.priorityDecay AbstractExampleGrid.arrowPrefab AbstractExampleGrid.PrimaryAction AbstractExampleGrid.SecondaryAction AbstractExampleGrid.ToggleAction() AbstractExampleGrid.WorldGrid AbstractExampleGrid.TilePrefab AbstractExampleGrid.CurrentMode AbstractExampleGrid.AllowInputs AbstractExampleGrid.OnPlayModeChange AbstractExampleGrid.PathfindingStep() AbstractExampleGrid.TogglePlay() AbstractExampleGrid.ResetBlocked() AbstractExampleGrid.CreateArrow(Vector2Int, Vector2Int) AbstractExampleGrid.DeleteArrow(Vector2Int, Vector2Int) AbstractExampleGrid.SetPrimaryAction(BoardAction) AbstractExampleGrid.Start() AbstractExampleGrid.DoOnValidPres(Action<Vector2Int>) AbstractExampleGrid.OnEnable() AbstractExampleGrid.OnDisable() AbstractExampleGrid.BlockTile(Vector2Int) AbstractExampleGrid.GetSelectedPosition() AbstractExampleGrid.ResetProgress() AbstractExampleGrid.ClearPath() AbstractExampleGrid.ClearBlockedTiles() AbstractExampleGrid.ResetBoard() AbstractExampleGrid.SelectTile(Vector2Int) AbstractExampleGrid.UpdatePathWeight(PathfindingStep<Vector2Int>) AbstractExampleGrid.ShouldWait() AbstractExampleGrid.WaitStep() AbstractExampleGrid.DrawPathVisualization(IEnumerable<PathfindingStep<Vector2Int>>) AbstractExampleGrid.DrawPath() AbstractExampleGrid.UpdateTileColor(Vector2Int) AbstractExampleGrid.GetTileState(Vector2Int) Namespace : nickmaltbie.TileMaps.Example Assembly : cs.temp.dll.dll Syntax public class ExampleSquareGrid : AbstractExampleGrid Methods CreateGridMap() Function to create a world grid Declaration protected override (IWorldGrid<Vector2Int, GameObject>, IBlockableTileMap<Vector2Int, GameObject>) CreateGridMap() Returns Type Description (T1, T2) < IWorldGrid < Vector2Int , GameObject >, IBlockableTileMap < Vector2Int , GameObject >> The created world grid and associated blockable tile map for that grid. Overrides AbstractExampleGrid.CreateGridMap()"
  },
  "api/nickmaltbie.TileMaps.Example.html": {
    "href": "api/nickmaltbie.TileMaps.Example.html",
    "title": "Namespace nickmaltbie.TileMaps.Example | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.TileMaps.Example Classes AbstractExampleGrid Example grid of spawned prefabs. Coord Coordinate of an element referenced back to the grid it belongs to. ExampleHexGrid Example hexagon grid of spawned prefabs for testing purposes. ExampleSquareGrid Example square grid of spawned prefabs for testing purposes. Enums BoardAction Action for main click to toggle between blocking tiles on the map or selecting for pathfinding. PathfindingAnimationState Current mode of the pathfinding. PathfindingSelectionState Current selection state of the pathfinding. PathMode Path modes that can be used when pathfinding in this grid. TileState State of a tile for rendering to the end user."
  },
  "api/nickmaltbie.TileMaps.Example.PathfindingAnimationState.html": {
    "href": "api/nickmaltbie.TileMaps.Example.PathfindingAnimationState.html",
    "title": "Enum PathfindingAnimationState | Tile Maps Documentation",
    "keywords": "Enum PathfindingAnimationState Current mode of the pathfinding. Namespace : nickmaltbie.TileMaps.Example Assembly : cs.temp.dll.dll Syntax public enum PathfindingAnimationState Fields Name Description Paused Playing"
  },
  "api/nickmaltbie.TileMaps.Example.PathfindingSelectionState.html": {
    "href": "api/nickmaltbie.TileMaps.Example.PathfindingSelectionState.html",
    "title": "Enum PathfindingSelectionState | Tile Maps Documentation",
    "keywords": "Enum PathfindingSelectionState Current selection state of the pathfinding. Namespace : nickmaltbie.TileMaps.Example Assembly : cs.temp.dll.dll Syntax public enum PathfindingSelectionState Fields Name Description End Playing Start"
  },
  "api/nickmaltbie.TileMaps.Example.PathMode.html": {
    "href": "api/nickmaltbie.TileMaps.Example.PathMode.html",
    "title": "Enum PathMode | Tile Maps Documentation",
    "keywords": "Enum PathMode Path modes that can be used when pathfinding in this grid. Namespace : nickmaltbie.TileMaps.Example Assembly : cs.temp.dll.dll Syntax public enum PathMode Fields Name Description AStar BreadthFirstSearch DepthFirstSearch HillClimbing"
  },
  "api/nickmaltbie.TileMaps.Example.TileState.html": {
    "href": "api/nickmaltbie.TileMaps.Example.TileState.html",
    "title": "Enum TileState | Tile Maps Documentation",
    "keywords": "Enum TileState State of a tile for rendering to the end user. Namespace : nickmaltbie.TileMaps.Example Assembly : cs.temp.dll.dll Syntax public enum TileState Fields Name Description Blocked Default Path Queued Searched Selected"
  },
  "api/nickmaltbie.TileMaps.Hexagon.HexCoord.html": {
    "href": "api/nickmaltbie.TileMaps.Hexagon.HexCoord.html",
    "title": "Class HexCoord | Tile Maps Documentation",
    "keywords": "Class HexCoord Utility functions for hexagon coordinate grid. This set of coordinates assumes that a row is represented in the y coordinate of a hexagon and the column is represented in the x coordinate of a hexagon. Moving in the positive x direction will increase column and moving in the positive y direction will increase the row value. Inheritance Object HexCoord Namespace : nickmaltbie.TileMaps.Hexagon Assembly : cs.temp.dll.dll Syntax public static class HexCoord Methods GetAdjacent(Vector2Int) Get the coordinates of hexagons adjacent to a given cordinate in a grid. Declaration public static IEnumerable<Vector2Int> GetAdjacent(Vector2Int loc) Parameters Type Name Description Vector2Int loc Location within the hexagon grid. Returns Type Description IEnumerable < Vector2Int > Enumerable of adjacent coordinates to a given hexagon location in a grid. GetAdjacentDir(Vector2Int, HexDir) Gets the coordinate of a hexagon that is a given direction from a specific hexagon. Declaration public static Vector2Int GetAdjacentDir(Vector2Int loc, HexDir dir) Parameters Type Name Description Vector2Int loc Location of hexagon within the grid. HexDir dir Direction relative to hexagon. Returns Type Description Vector2Int Coordinate of hexagon that is the given direction from the provided location."
  },
  "api/nickmaltbie.TileMaps.Hexagon.HexDir.html": {
    "href": "api/nickmaltbie.TileMaps.Hexagon.HexDir.html",
    "title": "Enum HexDir | Tile Maps Documentation",
    "keywords": "Enum HexDir Directions relative to a hexagon. These are expressed as degrees relative to zero where zero is directly to the right. This is assuming a hexagon grid is stacked evenly in an offset grid where moving at a different multiples of 60 degrees (in a counter clockwise direction at angles of 0, 60, 120, 180, 240, 300) will lead directly towards another hexagon. Each of the hexagon directions has a numeric value of the degrees of turning to move in that direction. Namespace : nickmaltbie.TileMaps.Hexagon Assembly : cs.temp.dll.dll Syntax public enum HexDir Fields Name Description BottomLeft BottomRight Left Right TopLeft TopRight"
  },
  "api/nickmaltbie.TileMaps.Hexagon.HexTileMap-1.html": {
    "href": "api/nickmaltbie.TileMaps.Hexagon.HexTileMap-1.html",
    "title": "Class HexTileMap<V> | Tile Maps Documentation",
    "keywords": "Class HexTileMap<V> Fixed size hexagon grid tile map that can contain generic values at each position within the map. Inheritance Object HexTileMap<V> Namespace : nickmaltbie.TileMaps.Hexagon Assembly : cs.temp.dll.dll Syntax public class HexTileMap<V> : IBlockableTileMap<Vector2Int, V> Type Parameters Name Description V Type of values contained within each cell in the grid. Constructors HexTileMap(Int32, Int32) Create a fixed size hexagon grid with a given width and height. Declaration public HexTileMap(int width, int height) Parameters Type Name Description Int32 width Width of the hexagon grid. Int32 height Height of the hexagon grid. Properties Item[Vector2Int] Declaration public V this[Vector2Int loc] { get; set; } Parameters Type Name Description Vector2Int loc Property Value Type Description V Methods Block(Vector2Int) Declaration public void Block(Vector2Int loc) Parameters Type Name Description Vector2Int loc Clear() Declaration public void Clear() Contains(Vector2Int) Declaration public bool Contains(Vector2Int vertex) Parameters Type Name Description Vector2Int vertex Returns Type Description Boolean Degree(Vector2Int) Declaration public int Degree(Vector2Int vertex) Parameters Type Name Description Vector2Int vertex Returns Type Description Int32 GetNeighbors(Vector2Int) Declaration public IEnumerable<Vector2Int> GetNeighbors(Vector2Int loc) Parameters Type Name Description Vector2Int loc Returns Type Description IEnumerable < Vector2Int > IsBlocked(Vector2Int) Declaration public bool IsBlocked(Vector2Int loc) Parameters Type Name Description Vector2Int loc Returns Type Description Boolean ResetBlocks() Declaration public void ResetBlocks() Unblock(Vector2Int) Declaration public void Unblock(Vector2Int loc) Parameters Type Name Description Vector2Int loc"
  },
  "api/nickmaltbie.TileMaps.Hexagon.HexWorldGrid-1.html": {
    "href": "api/nickmaltbie.TileMaps.Hexagon.HexWorldGrid-1.html",
    "title": "Class HexWorldGrid<V> | Tile Maps Documentation",
    "keywords": "Class HexWorldGrid<V> Grid for loading a hex grid map into the unity game scene. Inheritance Object HexWorldGrid<V> Namespace : nickmaltbie.TileMaps.Hexagon Assembly : cs.temp.dll.dll Syntax public class HexWorldGrid<V> : IWorldGrid<Vector2Int, V> Type Parameters Name Description V Constructors HexWorldGrid(ITileMap<Vector2Int, V>, Single, Transform) Create a hex grid with a given tile map. Declaration public HexWorldGrid(ITileMap<Vector2Int, V> tileMap, float hexRadius, Transform basePosition) Parameters Type Name Description ITileMap < Vector2Int , V> tileMap Tile map that this world grid represents. Single hexRadius Radius of hexagon, distance from center to vertex. Transform basePosition Base position of the square grid. Methods GetTileMap() Declaration public ITileMap<Vector2Int, V> GetTileMap() Returns Type Description ITileMap < Vector2Int , V> GetWorldPosition(Vector2Int) Declaration public Vector3 GetWorldPosition(Vector2Int loc) Parameters Type Name Description Vector2Int loc Returns Type Description Vector3 GetWorldRotation(Vector2Int) Declaration public Quaternion GetWorldRotation(Vector2Int loc) Parameters Type Name Description Vector2Int loc Returns Type Description Quaternion"
  },
  "api/nickmaltbie.TileMaps.Hexagon.html": {
    "href": "api/nickmaltbie.TileMaps.Hexagon.html",
    "title": "Namespace nickmaltbie.TileMaps.Hexagon | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.TileMaps.Hexagon Classes HexCoord Utility functions for hexagon coordinate grid. This set of coordinates assumes that a row is represented in the y coordinate of a hexagon and the column is represented in the x coordinate of a hexagon. Moving in the positive x direction will increase column and moving in the positive y direction will increase the row value. HexTileMap<V> Fixed size hexagon grid tile map that can contain generic values at each position within the map. HexWorldGrid<V> Grid for loading a hex grid map into the unity game scene. Enums HexDir Directions relative to a hexagon. These are expressed as degrees relative to zero where zero is directly to the right. This is assuming a hexagon grid is stacked evenly in an offset grid where moving at a different multiples of 60 degrees (in a counter clockwise direction at angles of 0, 60, 120, 180, 240, 300) will lead directly towards another hexagon. Each of the hexagon directions has a numeric value of the degrees of turning to move in that direction."
  },
  "api/nickmaltbie.TileMaps.Pathfinding.html": {
    "href": "api/nickmaltbie.TileMaps.Pathfinding.html",
    "title": "Namespace nickmaltbie.TileMaps.Pathfinding | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.TileMaps.Pathfinding Classes Path<V> Represent a path via recursive definition for finding a path between nodes in a graph. PathfindExtensions Pathfinding extensions between two locations in a hex grid."
  },
  "api/nickmaltbie.TileMaps.Pathfinding.Path-1.html": {
    "href": "api/nickmaltbie.TileMaps.Pathfinding.Path-1.html",
    "title": "Class Path<V> | Tile Maps Documentation",
    "keywords": "Class Path<V> Represent a path via recursive definition for finding a path between nodes in a graph. Inheritance Object Path<V> Namespace : nickmaltbie.TileMaps.Pathfinding Assembly : cs.temp.dll.dll Syntax public class Path<V> Type Parameters Name Description V Type of nodes stored in the path Constructors Path(V) Create a path that consists of just a single node that has no previous path. Declaration public Path(V node) Parameters Type Name Description V node Single node within the path. Path(V, Path<V>) Create a path for a current node and with provided previous path. Declaration public Path(V node, Path<V> previous) Parameters Type Name Description V node node stored at this step in the path. Path <V> previous Previous nodes in the path. Properties Node Get the node stored at this step in the path. Declaration public V Node { get; } Property Value Type Description V Previous Get the path previous to this node. Declaration public Path<V> Previous { get; } Property Value Type Description Path <V> Methods FullPath() Enumerate the full path from the start to this node (will end with this node). Declaration public IEnumerable<V> FullPath() Returns Type Description IEnumerable <V> Enumerable of all nodes in the path Length() Get the full length of the path. Declaration public int Length() Returns Type Description Int32"
  },
  "api/nickmaltbie.TileMaps.Pathfinding.PathfindExtensions.html": {
    "href": "api/nickmaltbie.TileMaps.Pathfinding.PathfindExtensions.html",
    "title": "Class PathfindExtensions | Tile Maps Documentation",
    "keywords": "Class PathfindExtensions Pathfinding extensions between two locations in a hex grid. Inheritance Object PathfindExtensions Namespace : nickmaltbie.TileMaps.Pathfinding Assembly : cs.temp.dll.dll Syntax public static class PathfindExtensions Methods FindPathAStar<V, W>(IGraph<V>, V, V, Func<Path<V>, W>, out List<V>) Find a path between two nodes in the graph using A Star Algorithm. Declaration public static bool FindPathAStar<V, W>(this IGraph<V> graph, V source, V dest, Func<Path<V>, W> GetWeight, out List<V> path) where W : IComparable Parameters Type Name Description IGraph <V> graph Graph to find path within. V source Starting position for path. V dest Destination of path. Func < Path <V>, W> GetWeight Get the weight of a given path. List <V> path Path found between source and dest in the graph. If a path cannot be found between the two points, this will be an empty list with no elements. Returns Type Description Boolean True if a path can be found between the source and destination, false otherwise. Type Parameters Name Description V Type of coordinates within the graph. W Type of value used to store weight of paths. Must be comparable to W. FindPathBFS<V>(IGraph<V>, V, V, out List<V>) Find a path between two nodes in the graph using breadth first search. Declaration public static bool FindPathBFS<V>(this IGraph<V> graph, V source, V dest, out List<V> path) Parameters Type Name Description IGraph <V> graph Graph to find path within. V source Starting position for path. V dest Destination of path. List <V> path Path found between source and dest in the graph. If a path cannot be found between the two points, this will be an empty list with no elements. Returns Type Description Boolean True if a path can be found between the source and destination, false otherwise. Type Parameters Name Description V Type of coordinates within the graph. FindPathDFS<V>(IGraph<V>, V, V, out List<V>) Find a path between two nodes in the graph using depth first search. Declaration public static bool FindPathDFS<V>(this IGraph<V> graph, V source, V dest, out List<V> path) Parameters Type Name Description IGraph <V> graph Graph to find path within. V source Starting position for path. V dest Destination of path. List <V> path Path found between source and dest in the graph. If a path cannot be found between the two points, this will be an empty list with no elements. Returns Type Description Boolean True if a path can be found between the source and destination, false otherwise. Type Parameters Name Description V Type of coordinates within the graph."
  },
  "api/nickmaltbie.TileMaps.Pathfinding.PathOrder.html": {
    "href": "api/nickmaltbie.TileMaps.Pathfinding.PathOrder.html",
    "title": "Namespace nickmaltbie.TileMaps.Pathfinding.PathOrder | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.TileMaps.Pathfinding.PathOrder Classes PathPriorityQueue<W, V> Path collection that uses weighted paths to store the next path in the collection via a function. These paths are sorted using a priority queue. PathQueue<V> Path collection that uses a queue to store the next path to check with a first in first out methodology. PathStack<V> Path collection that uses a stack to store the next path to check with a first in last out methodology. Interfaces IPathOrder<V> Generic collection of paths used for pathfinding that can have paths of a specific type added to it or paths of a specific type removed from it."
  },
  "api/nickmaltbie.TileMaps.Pathfinding.PathOrder.IPathOrder-1.html": {
    "href": "api/nickmaltbie.TileMaps.Pathfinding.PathOrder.IPathOrder-1.html",
    "title": "Interface IPathOrder<V> | Tile Maps Documentation",
    "keywords": "Interface IPathOrder<V> Generic collection of paths used for pathfinding that can have paths of a specific type added to it or paths of a specific type removed from it. Namespace : nickmaltbie.TileMaps.Pathfinding.PathOrder Assembly : cs.temp.dll.dll Syntax public interface IPathOrder<V> Type Parameters Name Description V Type of elements used in paths. Properties Count Get the number of elements stored in this current path collection. Declaration int Count { get; } Property Value Type Description Int32 Methods AddPath(Path<V>) Add a path to the given collection. Declaration void AddPath(Path<V> path) Parameters Type Name Description Path <V> path Path to add to this collection. EnumerateElements() Enumerate the elements in this path in some given order. This intended as a debug operation and may not always result in the fully correct order of elements. Declaration IEnumerable<Path<V>> EnumerateElements() Returns Type Description IEnumerable < Path <V>> The enumerated values within this path order. Peek() Peek at the next path to check without removing it from the collection. Declaration Path<V> Peek() Returns Type Description Path <V> The path that is stored at the front of the collection. Pop() Get the next path to check and remove it from the collection. Declaration Path<V> Pop() Returns Type Description Path <V> The path that is stored at the front of the collection."
  },
  "api/nickmaltbie.TileMaps.Pathfinding.PathOrder.PathPriorityQueue-2.html": {
    "href": "api/nickmaltbie.TileMaps.Pathfinding.PathOrder.PathPriorityQueue-2.html",
    "title": "Class PathPriorityQueue<W, V> | Tile Maps Documentation",
    "keywords": "Class PathPriorityQueue<W, V> Path collection that uses weighted paths to store the next path in the collection via a function. These paths are sorted using a priority queue. Inheritance Object PathPriorityQueue<W, V> Implements IPathOrder <V> Namespace : nickmaltbie.TileMaps.Pathfinding.PathOrder Assembly : cs.temp.dll.dll Syntax public class PathPriorityQueue<W, V> : IPathOrder<V> where W : IComparable Type Parameters Name Description W Weighted elements of paths in priority queue. V Type of elements used in paths. Constructors PathPriorityQueue(Func<Path<V>, W>) Initialize and instance of PathPriorityQueue with a given weighting function and an initial capacity of 10. Declaration public PathPriorityQueue(Func<Path<V>, W> GetWeight) Parameters Type Name Description Func < Path <V>, W> GetWeight Function to determine the weight of a given path. PathPriorityQueue(Func<Path<V>, W>, Int32) Initialize and instance of PathPriorityQueue with a given weighting function and capacity. Declaration public PathPriorityQueue(Func<Path<V>, W> GetWeight, int initialCapacity) Parameters Type Name Description Func < Path <V>, W> GetWeight Function to determine the weight of a given path. Int32 initialCapacity Initial capacity of the path. Properties Count Get the number of elements stored in this current path collection. Declaration public int Count { get; } Property Value Type Description Int32 Methods AddPath(Path<V>) Add a path to the given collection. Declaration public void AddPath(Path<V> path) Parameters Type Name Description Path <V> path Path to add to this collection. EnumerateElements() Enumerate the elements in this path in some given order. This intended as a debug operation and may not always result in the fully correct order of elements. Declaration public IEnumerable<Path<V>> EnumerateElements() Returns Type Description IEnumerable < Path <V>> The enumerated values within this path order. Peek() Peek at the next path to check without removing it from the collection. Declaration public Path<V> Peek() Returns Type Description Path <V> The path that is stored at the front of the collection. Pop() Get the next path to check and remove it from the collection. Declaration public Path<V> Pop() Returns Type Description Path <V> The path that is stored at the front of the collection. Implements IPathOrder<V>"
  },
  "api/nickmaltbie.TileMaps.Pathfinding.PathOrder.PathQueue-1.html": {
    "href": "api/nickmaltbie.TileMaps.Pathfinding.PathOrder.PathQueue-1.html",
    "title": "Class PathQueue<V> | Tile Maps Documentation",
    "keywords": "Class PathQueue<V> Path collection that uses a queue to store the next path to check with a first in first out methodology. Inheritance Object PathQueue<V> Implements IPathOrder <V> Namespace : nickmaltbie.TileMaps.Pathfinding.PathOrder Assembly : cs.temp.dll.dll Syntax public class PathQueue<V> : IPathOrder<V> Type Parameters Name Description V Type of elements used in paths. Constructors PathQueue() Initialize and instance of PathQueue. Declaration public PathQueue() Properties Count Get the number of elements stored in this current path collection. Declaration public int Count { get; } Property Value Type Description Int32 Methods AddPath(Path<V>) Add a path to the given collection. Declaration public void AddPath(Path<V> path) Parameters Type Name Description Path <V> path Path to add to this collection. EnumerateElements() Enumerate the elements in this path in some given order. This intended as a debug operation and may not always result in the fully correct order of elements. Declaration public IEnumerable<Path<V>> EnumerateElements() Returns Type Description IEnumerable < Path <V>> The enumerated values within this path order. Peek() Peek at the next path to check without removing it from the collection. Declaration public Path<V> Peek() Returns Type Description Path <V> The path that is stored at the front of the collection. Pop() Get the next path to check and remove it from the collection. Declaration public Path<V> Pop() Returns Type Description Path <V> The path that is stored at the front of the collection. Implements IPathOrder<V>"
  },
  "api/nickmaltbie.TileMaps.Pathfinding.PathOrder.PathStack-1.html": {
    "href": "api/nickmaltbie.TileMaps.Pathfinding.PathOrder.PathStack-1.html",
    "title": "Class PathStack<V> | Tile Maps Documentation",
    "keywords": "Class PathStack<V> Path collection that uses a stack to store the next path to check with a first in last out methodology. Inheritance Object PathStack<V> Implements IPathOrder <V> Namespace : nickmaltbie.TileMaps.Pathfinding.PathOrder Assembly : cs.temp.dll.dll Syntax public class PathStack<V> : IPathOrder<V> Type Parameters Name Description V Type of elements used in paths. Constructors PathStack() Initialize and instance of PathStack. Declaration public PathStack() Properties Count Get the number of elements stored in this current path collection. Declaration public int Count { get; } Property Value Type Description Int32 Methods AddPath(Path<V>) Add a path to the given collection. Declaration public void AddPath(Path<V> path) Parameters Type Name Description Path <V> path Path to add to this collection. EnumerateElements() Enumerate the elements in this path in some given order. This intended as a debug operation and may not always result in the fully correct order of elements. Declaration public IEnumerable<Path<V>> EnumerateElements() Returns Type Description IEnumerable < Path <V>> The enumerated values within this path order. Peek() Peek at the next path to check without removing it from the collection. Declaration public Path<V> Peek() Returns Type Description Path <V> The path that is stored at the front of the collection. Pop() Get the next path to check and remove it from the collection. Declaration public Path<V> Pop() Returns Type Description Path <V> The path that is stored at the front of the collection. Implements IPathOrder<V>"
  },
  "api/nickmaltbie.TileMaps.Pathfinding.Visualization.html": {
    "href": "api/nickmaltbie.TileMaps.Pathfinding.Visualization.html",
    "title": "Namespace nickmaltbie.TileMaps.Pathfinding.Visualization | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.TileMaps.Pathfinding.Visualization Classes PathfindingVisualization Pathfinding extensions between two locations in a hex grid. Structs PathfindingStep<V> Structure describing an individual step within a pathfinding search. Enums StepType Types of steps/iterations in the pathfinding algorithm."
  },
  "api/nickmaltbie.TileMaps.Pathfinding.Visualization.PathfindingStep-1.html": {
    "href": "api/nickmaltbie.TileMaps.Pathfinding.Visualization.PathfindingStep-1.html",
    "title": "Struct PathfindingStep<V> | Tile Maps Documentation",
    "keywords": "Struct PathfindingStep<V> Structure describing an individual step within a pathfinding search. Namespace : nickmaltbie.TileMaps.Pathfinding.Visualization Assembly : cs.temp.dll.dll Syntax public struct PathfindingStep<V> Type Parameters Name Description V Fields currentPath Current path that is being evaluated in this step. Declaration public Path<V> currentPath Field Value Type Description Path <V> pathFound Has a path to the destination been found. Declaration public bool pathFound Field Value Type Description Boolean pathOrder Order of all vertices to be searched next. Declaration public IPathOrder<V> pathOrder Field Value Type Description IPathOrder <V> stepType Type of step within the pathfinding algorithm. Declaration public StepType stepType Field Value Type Description StepType"
  },
  "api/nickmaltbie.TileMaps.Pathfinding.Visualization.PathfindingVisualization.html": {
    "href": "api/nickmaltbie.TileMaps.Pathfinding.Visualization.PathfindingVisualization.html",
    "title": "Class PathfindingVisualization | Tile Maps Documentation",
    "keywords": "Class PathfindingVisualization Pathfinding extensions between two locations in a hex grid. Inheritance Object PathfindingVisualization Namespace : nickmaltbie.TileMaps.Pathfinding.Visualization Assembly : cs.temp.dll.dll Syntax public static class PathfindingVisualization Methods VisualizePathAStar<V, W>(IGraph<V>, V, V, Func<Path<V>, W>) Declaration public static IEnumerable<PathfindingStep<V>> VisualizePathAStar<V, W>(this IGraph<V> tileMap, V source, V dest, Func<Path<V>, W> GetWeight) where W : IComparable Parameters Type Name Description IGraph <V> tileMap V source V dest Func < Path <V>, W> GetWeight Returns Type Description IEnumerable < PathfindingStep <V>> Type Parameters Name Description V W VisualizePathBFS<V>(IGraph<V>, V, V) Declaration public static IEnumerable<PathfindingStep<V>> VisualizePathBFS<V>(this IGraph<V> tileMap, V source, V dest) Parameters Type Name Description IGraph <V> tileMap V source V dest Returns Type Description IEnumerable < PathfindingStep <V>> Type Parameters Name Description V VisualizePathDFS<V>(IGraph<V>, V, V) Declaration public static IEnumerable<PathfindingStep<V>> VisualizePathDFS<V>(this IGraph<V> tileMap, V source, V dest) Parameters Type Name Description IGraph <V> tileMap V source V dest Returns Type Description IEnumerable < PathfindingStep <V>> Type Parameters Name Description V"
  },
  "api/nickmaltbie.TileMaps.Pathfinding.Visualization.StepType.html": {
    "href": "api/nickmaltbie.TileMaps.Pathfinding.Visualization.StepType.html",
    "title": "Enum StepType | Tile Maps Documentation",
    "keywords": "Enum StepType Types of steps/iterations in the pathfinding algorithm. Namespace : nickmaltbie.TileMaps.Pathfinding.Visualization Assembly : cs.temp.dll.dll Syntax public enum StepType Fields Name Description AddNode EndPath MarkSearched SkipSearched StartPath"
  },
  "api/nickmaltbie.TileMaps.Square.Adjacency.html": {
    "href": "api/nickmaltbie.TileMaps.Square.Adjacency.html",
    "title": "Enum Adjacency | Tile Maps Documentation",
    "keywords": "Enum Adjacency Types of adjacency for square coordinate grid. Namespace : nickmaltbie.TileMaps.Square Assembly : cs.temp.dll.dll Syntax public enum Adjacency Fields Name Description Full Orthogonal"
  },
  "api/nickmaltbie.TileMaps.Square.html": {
    "href": "api/nickmaltbie.TileMaps.Square.html",
    "title": "Namespace nickmaltbie.TileMaps.Square | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.TileMaps.Square Classes SquareCoord Utility functions for square coordinate grid. SquareTileMap<V> Fixed size square grid tile map that can contain generic values at each position within the map. SquareWorldGrid<V> Grid for loading a square grid map into the unity game scene. Enums Adjacency Types of adjacency for square coordinate grid."
  },
  "api/nickmaltbie.TileMaps.Square.SquareCoord.html": {
    "href": "api/nickmaltbie.TileMaps.Square.SquareCoord.html",
    "title": "Class SquareCoord | Tile Maps Documentation",
    "keywords": "Class SquareCoord Utility functions for square coordinate grid. Inheritance Object SquareCoord Namespace : nickmaltbie.TileMaps.Square Assembly : cs.temp.dll.dll Syntax public static class SquareCoord Fields Down Right coordinate (0, -1) Declaration public static Vector2Int Down Field Value Type Description Vector2Int fullAdj Offset of all full adjacent tiles (orthogonal + diagonals) enumerated in counter clockwise order starting with 0 radians at (1, 0). Declaration public static readonly Vector2Int[] fullAdj Field Value Type Description Vector2Int [] Left Left coordinate (-1, 0) Declaration public static Vector2Int Left Field Value Type Description Vector2Int orthongoalAdj Offset of all orthogonally adjacent tiles enumerated in counter clockwise order starting with 0 radians at (1, 0). Declaration public static readonly Vector2Int[] orthongoalAdj Field Value Type Description Vector2Int [] Right Right Coordinate (1, 0) Declaration public static Vector2Int Right Field Value Type Description Vector2Int Up Up coordinate (0, 1) Declaration public static Vector2Int Up Field Value Type Description Vector2Int"
  },
  "api/nickmaltbie.TileMaps.Square.SquareTileMap-1.html": {
    "href": "api/nickmaltbie.TileMaps.Square.SquareTileMap-1.html",
    "title": "Class SquareTileMap<V> | Tile Maps Documentation",
    "keywords": "Class SquareTileMap<V> Fixed size square grid tile map that can contain generic values at each position within the map. Inheritance Object SquareTileMap<V> Namespace : nickmaltbie.TileMaps.Square Assembly : cs.temp.dll.dll Syntax public class SquareTileMap<V> : IBlockableTileMap<Vector2Int, V> Type Parameters Name Description V Type of values contained within each cell in the grid. Constructors SquareTileMap(Int32, Int32, Adjacency) Initialize a tile map with a given width and height. Declaration public SquareTileMap(int width, int height, Adjacency adjacencyType) Parameters Type Name Description Int32 width Width of the tile map in number of squares. Int32 height Height of the tile map in number of squares. Adjacency adjacencyType Type of adjacency within the tile map. Properties Item[Vector2Int] Declaration public V this[Vector2Int loc] { get; set; } Parameters Type Name Description Vector2Int loc Property Value Type Description V Methods Block(Vector2Int) Declaration public void Block(Vector2Int loc) Parameters Type Name Description Vector2Int loc Clear() Declaration public void Clear() Contains(Vector2Int) Declaration public bool Contains(Vector2Int loc) Parameters Type Name Description Vector2Int loc Returns Type Description Boolean Degree(Vector2Int) Declaration public int Degree(Vector2Int loc) Parameters Type Name Description Vector2Int loc Returns Type Description Int32 GetEnumerator() Enumerates the square locations in the grid in an arbitrary order. Declaration public IEnumerator<Vector2Int> GetEnumerator() Returns Type Description IEnumerator < Vector2Int > An enumerator of the locations within the square grid. GetLocations() Get the locations in the square tile map in an arbitrary order. Declaration public IEnumerator<Vector2Int> GetLocations() Returns Type Description IEnumerator < Vector2Int > Enumerator of the locations in the map. GetNeighbors(Vector2Int) Declaration public IEnumerable<Vector2Int> GetNeighbors(Vector2Int loc) Parameters Type Name Description Vector2Int loc Returns Type Description IEnumerable < Vector2Int > IsBlocked(Vector2Int) Declaration public bool IsBlocked(Vector2Int loc) Parameters Type Name Description Vector2Int loc Returns Type Description Boolean ResetBlocks() Declaration public void ResetBlocks() Unblock(Vector2Int) Declaration public void Unblock(Vector2Int loc) Parameters Type Name Description Vector2Int loc"
  },
  "api/nickmaltbie.TileMaps.Square.SquareWorldGrid-1.html": {
    "href": "api/nickmaltbie.TileMaps.Square.SquareWorldGrid-1.html",
    "title": "Class SquareWorldGrid<V> | Tile Maps Documentation",
    "keywords": "Class SquareWorldGrid<V> Grid for loading a square grid map into the unity game scene. Inheritance Object SquareWorldGrid<V> Namespace : nickmaltbie.TileMaps.Square Assembly : cs.temp.dll.dll Syntax public class SquareWorldGrid<V> : IWorldGrid<Vector2Int, V> Type Parameters Name Description V Constructors SquareWorldGrid(ITileMap<Vector2Int, V>, Single, Transform) Create a square grid with a given tile map. Declaration public SquareWorldGrid(ITileMap<Vector2Int, V> tileMap, float tileSize, Transform basePosition) Parameters Type Name Description ITileMap < Vector2Int , V> tileMap Tile map that this world grid represents. Single tileSize Size of each tile, the length of each edge in the square. Transform basePosition Base position of the square grid. Methods GetTileMap() Declaration public ITileMap<Vector2Int, V> GetTileMap() Returns Type Description ITileMap < Vector2Int , V> GetWorldPosition(Vector2Int) Declaration public Vector3 GetWorldPosition(Vector2Int loc) Parameters Type Name Description Vector2Int loc Returns Type Description Vector3 GetWorldRotation(Vector2Int) Declaration public Quaternion GetWorldRotation(Vector2Int loc) Parameters Type Name Description Vector2Int loc Returns Type Description Quaternion"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.ChangeQualityActions.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.ChangeQualityActions.html",
    "title": "Class ChangeQualityActions | Tile Maps Documentation",
    "keywords": "Class ChangeQualityActions Class to setup dropdown that controls various quality level selection and save settings between player session loadings Inheritance Object ChangeQualityActions Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax public class ChangeQualityActions : MonoBehaviour Fields qualityDropdown Dropdown that modifies the quality level Declaration public Dropdown qualityDropdown Field Value Type Description Dropdown qualityLevelPlayerPrefKey String key to save quality level under Declaration public const string qualityLevelPlayerPrefKey = \"qualityLevel\" Field Value Type Description String Methods Awake() Declaration public void Awake() OnQualityLevelChange(Int32) Quality level change event Declaration public void OnQualityLevelChange(int level) Parameters Type Name Description Int32 level"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.ChangeScreenActions.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.ChangeScreenActions.html",
    "title": "Class ChangeScreenActions | Tile Maps Documentation",
    "keywords": "Class ChangeScreenActions Change screen actions to modify resolution and quality settings Inheritance Object ChangeScreenActions Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax public class ChangeScreenActions : MonoBehaviour Fields confirmDialogNo Reject confirm dialog button Declaration public Button confirmDialogNo Field Value Type Description Button confirmDialogText Text for the confirm dialog information Declaration public UnityEngine.UI.Text confirmDialogText Field Value Type Description UnityEngine.UI.Text confirmDialogYes Accept confirm dialog button Declaration public Button confirmDialogYes Field Value Type Description Button confirmPanel Confirmation panel (enabled when confirming operations) Declaration public CanvasGroup confirmPanel Field Value Type Description CanvasGroup currentResolution Currently selected resolution Declaration public Resolution currentResolution Field Value Type Description Resolution displayDropdown Options to set selected monitor/display Declaration public Dropdown displayDropdown Field Value Type Description Dropdown resolutionDropdown Options to set screen resolution Declaration public Dropdown resolutionDropdown Field Value Type Description Dropdown settingsMenuController Settings menu controller (disable when the confirmation dialog is open) Declaration public MenuController settingsMenuController Field Value Type Description MenuController settingsPage Settings panel (disabled when confirming operations) Declaration public CanvasGroup settingsPage Field Value Type Description CanvasGroup vsyncToggle Toggle to control vysnc settings Declaration public Toggle vsyncToggle Field Value Type Description Toggle windowedDropdown Dropdown with windowed/fullScreen/borderless options Declaration public Dropdown windowedDropdown Field Value Type Description Dropdown Properties currentDisplay Currently selected display Declaration public int currentDisplay { get; } Property Value Type Description Int32 currentFullScreen Currently selected fullscreen mode Declaration public FullScreenMode currentFullScreen { get; } Property Value Type Description FullScreenMode Methods Awake() Declaration public void Awake() FilterResolutions(Resolution[]) Filter duplicate resolutions from a set of resolutions. Removes refresh rate from the data Declaration public static Resolution[] FilterResolutions(Resolution[] resolutions) Parameters Type Name Description Resolution [] resolutions Various resolution options Returns Type Description Resolution [] Filters duplicates with the same width and height GetFullScreenMode(String) Get the selected fullscreen mode from a selected fullscreen name Declaration public static FullScreenMode GetFullScreenMode(string selectedMode) Parameters Type Name Description String selectedMode Name of selected mode Returns Type Description FullScreenMode Fullscreen mode associated with this name GetFullScreenModeDropdownIndex(FullScreenMode) Get the fullscreen mode integer based on a selected fullscreen mode Declaration public static int GetFullScreenModeDropdownIndex(FullScreenMode mode) Parameters Type Name Description FullScreenMode mode Fullscreen mode to load Returns Type Description Int32 Index of fullscreen mode in the windowed dropdown selector OpenConfirmChangesDialog(ChangeScreenActions.ScreenSettingsGroup, Int32) Declaration public IEnumerator OpenConfirmChangesDialog(ChangeScreenActions.ScreenSettingsGroup previousSettings, int timeout = 15) Parameters Type Name Description ChangeScreenActions.ScreenSettingsGroup previousSettings Int32 timeout Returns Type Description IEnumerator OpenConfirmChangesDialog(Int32) Declaration public IEnumerator OpenConfirmChangesDialog(int timeout = 15) Parameters Type Name Description Int32 timeout Returns Type Description IEnumerator SetFullScreen(Int32) Declaration public void SetFullScreen(int fullScreenIndex) Parameters Type Name Description Int32 fullScreenIndex SetMonitor(Int32) Declaration public void SetMonitor(int targetMonitor) Parameters Type Name Description Int32 targetMonitor SetResolution(Int32) Declaration public void SetResolution(int resolutionIndex) Parameters Type Name Description Int32 resolutionIndex SetVsync(Boolean) Declaration public void SetVsync(bool isChecked) Parameters Type Name Description Boolean isChecked UpdateDisplayInfo() Declaration public void UpdateDisplayInfo()"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.ChangeScreenActions.ScreenSettingsGroup.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.ChangeScreenActions.ScreenSettingsGroup.html",
    "title": "Struct ChangeScreenActions.ScreenSettingsGroup | Tile Maps Documentation",
    "keywords": "Struct ChangeScreenActions.ScreenSettingsGroup Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax public struct ScreenSettingsGroup Fields fullScreenMode Declaration public FullScreenMode fullScreenMode Field Value Type Description FullScreenMode monitor Declaration public int monitor Field Value Type Description Int32 resolution Declaration public Resolution resolution Field Value Type Description Resolution"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.ConfigureMap.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.ConfigureMap.html",
    "title": "Class ConfigureMap | Tile Maps Documentation",
    "keywords": "Class ConfigureMap Manage controls to configure the map pathfinding. Inheritance Object ConfigureMap Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax public class ConfigureMap : MonoBehaviour Fields animationSprite Sprite to show play/pause button. Declaration public Image animationSprite Field Value Type Description Image clearPathButton Reset the current pathfinding. Declaration public Button clearPathButton Field Value Type Description Button finalPathSpeed Slider to select pathfinding speed for drawing final path. Declaration public Slider finalPathSpeed Field Value Type Description Slider mainActionDropdown Toggle main pointer action between block and pathfinding. Declaration public Dropdown mainActionDropdown Field Value Type Description Dropdown modeDropdown Dropdown for selecting path mode. Declaration public Dropdown modeDropdown Field Value Type Description Dropdown pathfindingSpeed Slider to select pathfinding speed for animation. Declaration public Slider pathfindingSpeed Field Value Type Description Slider pauseSprite Sprite for pause button. Declaration public Sprite pauseSprite Field Value Type Description Sprite playSprite Sprite for play button. Declaration public Sprite playSprite Field Value Type Description Sprite resetBlockedButton Reset the blocked tiles. Declaration public Button resetBlockedButton Field Value Type Description Button restartPathfinding Reset the current pathfinding progress Declaration public Button restartPathfinding Field Value Type Description Button stepButton Button to step pathfinding forward. Declaration public Button stepButton Field Value Type Description Button togglePlay Button to toggle animation. Declaration public Button togglePlay Field Value Type Description Button Methods ApplyOperationToMaps(Action<AbstractExampleGrid>) Applies a grid action to every active abstract example grid. Declaration public void ApplyOperationToMaps(Action<AbstractExampleGrid> gridAction) Parameters Type Name Description Action < AbstractExampleGrid > gridAction Action to apply to an abstract example grid. Awake() Setup pathfinding controls. Declaration public void Awake() GetGrid() Declaration public AbstractExampleGrid GetGrid() Returns Type Description AbstractExampleGrid"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.html",
    "title": "Namespace nickmaltbie.TileMaps.UI.Actions | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.TileMaps.UI.Actions Classes ChangeQualityActions Class to setup dropdown that controls various quality level selection and save settings between player session loadings ChangeScreenActions Change screen actions to modify resolution and quality settings ConfigureMap Manage controls to configure the map pathfinding. QuitGameAction Class with behaviour to quit game RebindCompositeInput Rebind a composite set of inputs RebindInputButton Rebind an individual button input action ResetBindingsButton Reset binding of all configurable input actions ScreenLoading Screen loading status information SoundAdjustActions Actions to adjust sound levels via sliders ToggleFullScreenAction Change the fullscreen mode of the game. Structs ChangeScreenActions.ScreenSettingsGroup RebindCompositeInput.RebindingGroup Rebinding group definition that includes the string name and button to control it SoundAdjustActions.AudioMixerSettingsGroup Object containing both a mixer group and audio slider Interfaces IBindingControl A binding that can be reset"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.IBindingControl.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.IBindingControl.html",
    "title": "Interface IBindingControl | Tile Maps Documentation",
    "keywords": "Interface IBindingControl A binding that can be reset Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax public interface IBindingControl Methods ResetBinding() Declaration void ResetBinding() UpdateDisplay() Declaration void UpdateDisplay()"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.QuitGameAction.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.QuitGameAction.html",
    "title": "Class QuitGameAction | Tile Maps Documentation",
    "keywords": "Class QuitGameAction Class with behaviour to quit game Inheritance Object QuitGameAction Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax public class QuitGameAction : MonoBehaviour Methods QuitGame() Quit the game Declaration public void QuitGame()"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.RebindCompositeInput.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.RebindCompositeInput.html",
    "title": "Class RebindCompositeInput | Tile Maps Documentation",
    "keywords": "Class RebindCompositeInput Rebind a composite set of inputs Inheritance Object RebindCompositeInput Implements IBindingControl Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax public class RebindCompositeInput : MonoBehaviour, IBindingControl Fields inputAction Composite input action being modified Declaration public InputActionReference inputAction Field Value Type Description InputActionReference inputMappingPlayerPrefPrefix Prefix for input mapping for saving to player preferences Declaration public const string inputMappingPlayerPrefPrefix = \"Input Mapping\" Field Value Type Description String menuController Menu controller related to this selected object Declaration public MenuController menuController Field Value Type Description MenuController rebindingGroups Binding groups that control binding for each component of the composite Declaration public RebindCompositeInput.RebindingGroup[] rebindingGroups Field Value Type Description RebindCompositeInput.RebindingGroup [] Properties rebindingOperation Rebinding operation action waiting for player command to change button bindings Declaration public InputActionRebindingExtensions.RebindingOperation rebindingOperation { get; } Property Value Type Description InputActionRebindingExtensions.RebindingOperation Methods Awake() Declaration public void Awake() InputMappingKey(Int32) Get the input mapping player preference key from a given index Declaration public string InputMappingKey(int index) Parameters Type Name Description Int32 index Index of binding component Returns Type Description String RebindCancel(Int32) Cancel the rebinding process for a given component of this composite axis. Declaration public void RebindCancel(int index) Parameters Type Name Description Int32 index RebindComplete(Int32) Finish the rebinding process for a given component of this composite axis. Declaration public void RebindComplete(int index) Parameters Type Name Description Int32 index Index of binding (starting at 0) ResetBinding() Declaration public void ResetBinding() Start() Declaration public void Start() StartRebinding(Int32) Start the rebinding process for a given component of this composite axis. Declaration public void StartRebinding(int index) Parameters Type Name Description Int32 index Index of binding (starting at 0) UpdateDisplay() Declaration public void UpdateDisplay() Implements IBindingControl"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.RebindCompositeInput.RebindingGroup.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.RebindCompositeInput.RebindingGroup.html",
    "title": "Struct RebindCompositeInput.RebindingGroup | Tile Maps Documentation",
    "keywords": "Struct RebindCompositeInput.RebindingGroup Rebinding group definition that includes the string name and button to control it Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax [Serializable] public struct RebindingGroup Fields bindingDisplayNameText Location of descriptive name of button Declaration public UnityEngine.UI.Text bindingDisplayNameText Field Value Type Description UnityEngine.UI.Text startRebinding Button used to start rebinding operation Declaration public Button startRebinding Field Value Type Description Button waitingForInputObject Text to show when waiting for player input Declaration public GameObject waitingForInputObject Field Value Type Description GameObject"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.RebindInputButton.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.RebindInputButton.html",
    "title": "Class RebindInputButton | Tile Maps Documentation",
    "keywords": "Class RebindInputButton Rebind an individual button input action Inheritance Object RebindInputButton Implements IBindingControl Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax public class RebindInputButton : MonoBehaviour, IBindingControl Fields bindingDisplayNameText Binding display name for showing the control button description Declaration public UnityEngine.UI.Text bindingDisplayNameText Field Value Type Description UnityEngine.UI.Text cancelPath Path used to cancel binding mid operation Declaration public string cancelPath Field Value Type Description String inputAction Input action being modified Declaration public InputActionReference inputAction Field Value Type Description InputActionReference inputMappingPlayerPrefPrefix Prefix for input mapping for saving to player preferences Declaration public const string inputMappingPlayerPrefPrefix = \"Input Mapping\" Field Value Type Description String menuController Menu controller related to this selected object Declaration public MenuController menuController Field Value Type Description MenuController startRebinding Button to start rebinding for the given input action Declaration public Button startRebinding Field Value Type Description Button waitingForInputObject Text to display when waiting for the player to press a new input action Declaration public GameObject waitingForInputObject Field Value Type Description GameObject Properties InputMappingKey Get the input mapping player preference key from a given index Declaration public string InputMappingKey { get; } Property Value Type Description String rebindingOperation Rebinding operation action waiting for player command to change button bindings Declaration public InputActionRebindingExtensions.RebindingOperation rebindingOperation { get; } Property Value Type Description InputActionRebindingExtensions.RebindingOperation Methods Awake() Declaration public void Awake() RebindCancel() Cancel the rebinding process for a given component of this composite axis. Declaration public void RebindCancel() RebindComplete() Finish the rebinding process for a given component of this composite axis. Declaration public void RebindComplete() ResetBinding() Declaration public void ResetBinding() Start() Declaration public void Start() StartRebinding() Start the rebinding process for a given component of this composite axis. Declaration public void StartRebinding() UpdateDisplay() Declaration public void UpdateDisplay() Implements IBindingControl"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.ResetBindingsButton.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.ResetBindingsButton.html",
    "title": "Class ResetBindingsButton | Tile Maps Documentation",
    "keywords": "Class ResetBindingsButton Reset binding of all configurable input actions Inheritance Object ResetBindingsButton Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax public class ResetBindingsButton : MonoBehaviour Fields button Declaration public Button button Field Value Type Description Button Methods ResetBindings() Declaration public void ResetBindings() Start() Declaration public void Start()"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.ScreenLoading.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.ScreenLoading.html",
    "title": "Class ScreenLoading | Tile Maps Documentation",
    "keywords": "Class ScreenLoading Screen loading status information Inheritance Object ScreenLoading Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax public static class ScreenLoading Fields borderlessWindowModeName Name of borderless window mode Declaration public const string borderlessWindowModeName = \"Borderless Windowed\" Field Value Type Description String fullScreenModeName Name of fullscreen mode Declaration public const string fullScreenModeName = \"FullScreen\" Field Value Type Description String setupDisplay Has the display been setup from saved settings Declaration public static bool setupDisplay Field Value Type Description Boolean windowedDropdownText Windowed states Declaration public static readonly string[] windowedDropdownText Field Value Type Description String [] windowedModeName Name of windowed mode Declaration public const string windowedModeName = \"Windowed\" Field Value Type Description String"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.SoundAdjustActions.AudioMixerSettingsGroup.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.SoundAdjustActions.AudioMixerSettingsGroup.html",
    "title": "Struct SoundAdjustActions.AudioMixerSettingsGroup | Tile Maps Documentation",
    "keywords": "Struct SoundAdjustActions.AudioMixerSettingsGroup Object containing both a mixer group and audio slider Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax public struct AudioMixerSettingsGroup Fields mixerGroup Associated audio mixer group Declaration public AudioMixerGroup mixerGroup Field Value Type Description AudioMixerGroup slider Slider to control audio mixer group level Declaration public Slider slider Field Value Type Description Slider"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.SoundAdjustActions.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.SoundAdjustActions.html",
    "title": "Class SoundAdjustActions | Tile Maps Documentation",
    "keywords": "Class SoundAdjustActions Actions to adjust sound levels via sliders Inheritance Object SoundAdjustActions Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax public class SoundAdjustActions : MonoBehaviour Fields maxVolume Maximum volume for sliders Declaration public const float maxVolume = 10F Field Value Type Description Single minVolume Minimum volume for sliders Declaration public const float minVolume = -20F Field Value Type Description Single mutedVolume Volume of slider when muted Declaration public const float mutedVolume = -80F Field Value Type Description Single powerValue Power value when scaling volume Declaration public const float powerValue = 2F Field Value Type Description Single settingsGroups Groups of sliders and sound mixer groups they modify Declaration public SoundAdjustActions.AudioMixerSettingsGroup[] settingsGroups Field Value Type Description SoundAdjustActions.AudioMixerSettingsGroup [] SoundVolumePrefixPlayerPrefKey Prefix key for sound volume. Declaration public const string SoundVolumePrefixPlayerPrefKey = \"SoundVolume\" Field Value Type Description String Methods GetSliderValue(Single) Get the value on a slider from a given volume level Declaration public static float GetSliderValue(float volumeLevel) Parameters Type Name Description Single volumeLevel Volume level on the slider Returns Type Description Single The float position of a slider based on the volume level GetVolumeLevel(Single) Gets the volume level from a given slider position Declaration public static float GetVolumeLevel(float sliderPosition) Parameters Type Name Description Single sliderPosition Slider position between 0 and 1 Returns Type Description Single The volume level between min volume and max volume Start() Declaration public void Start()"
  },
  "api/nickmaltbie.TileMaps.UI.Actions.ToggleFullScreenAction.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Actions.ToggleFullScreenAction.html",
    "title": "Class ToggleFullScreenAction | Tile Maps Documentation",
    "keywords": "Class ToggleFullScreenAction Change the fullscreen mode of the game. Inheritance Object ToggleFullScreenAction Namespace : nickmaltbie.TileMaps.UI.Actions Assembly : cs.temp.dll.dll Syntax public class ToggleFullScreenAction : Button Fields whenFullScreen Declaration public string whenFullScreen Field Value Type Description String whenWindowed Declaration public string whenWindowed Field Value Type Description String Methods Awake() Declaration protected override void Awake() OnPointerDown(PointerEventData) Declaration public override void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Update() Declaration public void Update()"
  },
  "api/nickmaltbie.TileMaps.UI.DisplayControls.html": {
    "href": "api/nickmaltbie.TileMaps.UI.DisplayControls.html",
    "title": "Class DisplayControls | Tile Maps Documentation",
    "keywords": "Class DisplayControls Inheritance Object DisplayControls Implements IScreenComponent Namespace : nickmaltbie.TileMaps.UI Assembly : cs.temp.dll.dll Syntax public class DisplayControls : MonoBehaviour, IScreenComponent Fields inputActions Declaration public InputActionReference[] inputActions Field Value Type Description InputActionReference [] Methods OnScreenLoaded() Declaration public void OnScreenLoaded() OnScreenUnloaded() Declaration public void OnScreenUnloaded() Start() Declaration public void Start() UpdateDisplay() Declaration public void UpdateDisplay() Implements IScreenComponent"
  },
  "api/nickmaltbie.TileMaps.UI.Events.CursorStateOnMenuLoad.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Events.CursorStateOnMenuLoad.html",
    "title": "Class CursorStateOnMenuLoad | Tile Maps Documentation",
    "keywords": "Class CursorStateOnMenuLoad Simple class to set cursor state when the menu loads Inheritance Object CursorStateOnMenuLoad Implements IScreenComponent Namespace : nickmaltbie.TileMaps.UI.Events Assembly : cs.temp.dll.dll Syntax public class CursorStateOnMenuLoad : MonoBehaviour, IScreenComponent Fields cursorLockMode Lock state of cursor when loading this screen Declaration public CursorLockMode cursorLockMode Field Value Type Description CursorLockMode cursorVisible Visible state of the cursor when loading this screen Declaration public bool cursorVisible Field Value Type Description Boolean Methods OnScreenLoaded() Declaration public void OnScreenLoaded() OnScreenUnloaded() Declaration public void OnScreenUnloaded() Implements IScreenComponent"
  },
  "api/nickmaltbie.TileMaps.UI.Events.GridInputModeOnLoad.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Events.GridInputModeOnLoad.html",
    "title": "Class GridInputModeOnLoad | Tile Maps Documentation",
    "keywords": "Class GridInputModeOnLoad Simple class to set grid input mode on loading this screen. Inheritance Object GridInputModeOnLoad Implements IScreenComponent Namespace : nickmaltbie.TileMaps.UI.Events Assembly : cs.temp.dll.dll Syntax public class GridInputModeOnLoad : MonoBehaviour, IScreenComponent Fields enabledState Selected action map. Declaration public bool enabledState Field Value Type Description Boolean Methods OnScreenLoaded() Declaration public void OnScreenLoaded() OnScreenUnloaded() Declaration public void OnScreenUnloaded() Implements IScreenComponent"
  },
  "api/nickmaltbie.TileMaps.UI.Events.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Events.html",
    "title": "Namespace nickmaltbie.TileMaps.UI.Events | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.TileMaps.UI.Events Classes CursorStateOnMenuLoad Simple class to set cursor state when the menu loads GridInputModeOnLoad Simple class to set grid input mode on loading this screen. LoadScreenOnEnable Simple class to load screen when enabled"
  },
  "api/nickmaltbie.TileMaps.UI.Events.LoadScreenOnEnable.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Events.LoadScreenOnEnable.html",
    "title": "Class LoadScreenOnEnable | Tile Maps Documentation",
    "keywords": "Class LoadScreenOnEnable Simple class to load screen when enabled Inheritance Object LoadScreenOnEnable Namespace : nickmaltbie.TileMaps.UI.Events Assembly : cs.temp.dll.dll Syntax public class LoadScreenOnEnable : MonoBehaviour Fields selectedScreen Declaration public GameObject selectedScreen Field Value Type Description GameObject Methods OnEnable() Declaration public void OnEnable()"
  },
  "api/nickmaltbie.TileMaps.UI.GameScreen.html": {
    "href": "api/nickmaltbie.TileMaps.UI.GameScreen.html",
    "title": "Class GameScreen | Tile Maps Documentation",
    "keywords": "Class GameScreen Game screen that can be hidden or shown to the player Inheritance Object GameScreen Namespace : nickmaltbie.TileMaps.UI Assembly : cs.temp.dll.dll Syntax public class GameScreen : MonoBehaviour Methods DisplayScreen() Set a screen as visible and enable all attached components Declaration public void DisplayScreen() HideScreen() Hide a screen and disable player action on this screen Declaration public void HideScreen() SetupScreen(InputSystemUIInputModule) Setup a screen with a given player input (if one exists) Declaration public void SetupScreen(InputSystemUIInputModule uIInputModule) Parameters Type Name Description InputSystemUIInputModule uIInputModule"
  },
  "api/nickmaltbie.TileMaps.UI.HideOnPlatform.html": {
    "href": "api/nickmaltbie.TileMaps.UI.HideOnPlatform.html",
    "title": "Class HideOnPlatform | Tile Maps Documentation",
    "keywords": "Class HideOnPlatform Simple class to hide element on a specific runtime platform. Inheritance Object HideOnPlatform Namespace : nickmaltbie.TileMaps.UI Assembly : cs.temp.dll.dll Syntax public class HideOnPlatform : MonoBehaviour Fields hidePlatform Declaration public RuntimePlatform hidePlatform Field Value Type Description RuntimePlatform Methods Awake() Declaration public void Awake()"
  },
  "api/nickmaltbie.TileMaps.UI.html": {
    "href": "api/nickmaltbie.TileMaps.UI.html",
    "title": "Namespace nickmaltbie.TileMaps.UI | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.TileMaps.UI Classes DisplayControls GameScreen Game screen that can be hidden or shown to the player HideOnPlatform Simple class to hide element on a specific runtime platform. LegendColors MenuController Simple class to abstract commands to change UI for a menu screen PopulateVersion RequestScreenChangeEventArgs Class to hold arguments for showing a new screen ScreenChangeEventArgs Class to hold screen change in state ShowOnPlatform Simple class to show an element on a specific runtime platform. TabPair TabStrip UIManager Class to manager various UI Screens Interfaces IScreenComponent"
  },
  "api/nickmaltbie.TileMaps.UI.IScreenComponent.html": {
    "href": "api/nickmaltbie.TileMaps.UI.IScreenComponent.html",
    "title": "Interface IScreenComponent | Tile Maps Documentation",
    "keywords": "Interface IScreenComponent Namespace : nickmaltbie.TileMaps.UI Assembly : cs.temp.dll.dll Syntax public interface IScreenComponent Methods OnScreenLoaded() Declaration void OnScreenLoaded() OnScreenUnloaded() Declaration void OnScreenUnloaded()"
  },
  "api/nickmaltbie.TileMaps.UI.LegendColors.html": {
    "href": "api/nickmaltbie.TileMaps.UI.LegendColors.html",
    "title": "Class LegendColors | Tile Maps Documentation",
    "keywords": "Class LegendColors Inheritance Object LegendColors Implements IScreenComponent Namespace : nickmaltbie.TileMaps.UI Assembly : cs.temp.dll.dll Syntax public class LegendColors : MonoBehaviour, IScreenComponent Fields blockedImage Declaration public Image blockedImage Field Value Type Description Image colorNames Declaration public static readonly string[] colorNames Field Value Type Description String [] demoMaterials Declaration public DemoMaterials demoMaterials Field Value Type Description DemoMaterials foundPathBase Declaration public Image foundPathBase Field Value Type Description Image foundPathPath Declaration public Image foundPathPath Field Value Type Description Image pathImage Declaration public Image pathImage Field Value Type Description Image queuedImage Declaration public Image queuedImage Field Value Type Description Image queuedPriority Declaration public Image[] queuedPriority Field Value Type Description Image [] searchedImage Declaration public Image searchedImage Field Value Type Description Image searchedPathBase Declaration public Image searchedPathBase Field Value Type Description Image searchedPathPath Declaration public Image searchedPathPath Field Value Type Description Image selectedImage Declaration public Image selectedImage Field Value Type Description Image ShaderName Declaration public const string ShaderName = \"Shader Graphs/PlanarMappingUnlit\" Field Value Type Description String Methods Awake() Declaration public void Awake() CopyProperties(Material, Material) Declaration public void CopyProperties(Material mat1, Material mat2) Parameters Type Name Description Material mat1 Material mat2 OnScreenLoaded() Declaration public void OnScreenLoaded() OnScreenUnloaded() Declaration public void OnScreenUnloaded() SetupMaterialProperties() Declaration public void SetupMaterialProperties() Implements IScreenComponent"
  },
  "api/nickmaltbie.TileMaps.UI.MenuController.html": {
    "href": "api/nickmaltbie.TileMaps.UI.MenuController.html",
    "title": "Class MenuController | Tile Maps Documentation",
    "keywords": "Class MenuController Simple class to abstract commands to change UI for a menu screen Inheritance Object MenuController Namespace : nickmaltbie.TileMaps.UI Assembly : cs.temp.dll.dll Syntax public class MenuController : MonoBehaviour Fields actionDelay Short action delay (how fast can the screen change) Declaration public float actionDelay Field Value Type Description Single allowInputChanges Can this menu controller allow for input to change screens Declaration public bool allowInputChanges Field Value Type Description Boolean Methods PreviousScreen() Requests go to the previous screen Declaration public void PreviousScreen() SetScreen(GameObject) Request a new screen using a prefab name Declaration public void SetScreen(GameObject screenPrefab) Parameters Type Name Description GameObject screenPrefab Screen prefab to switch to SetScreen(String) Request a new screen directly through a name Declaration public void SetScreen(string name) Parameters Type Name Description String name Name of new screen to display"
  },
  "api/nickmaltbie.TileMaps.UI.PopulateVersion.html": {
    "href": "api/nickmaltbie.TileMaps.UI.PopulateVersion.html",
    "title": "Class PopulateVersion | Tile Maps Documentation",
    "keywords": "Class PopulateVersion Inheritance Object PopulateVersion Namespace : nickmaltbie.TileMaps.UI Assembly : cs.temp.dll.dll Syntax public class PopulateVersion : MonoBehaviour Methods Awake() Declaration public void Awake()"
  },
  "api/nickmaltbie.TileMaps.UI.RequestScreenChangeEventArgs.html": {
    "href": "api/nickmaltbie.TileMaps.UI.RequestScreenChangeEventArgs.html",
    "title": "Class RequestScreenChangeEventArgs | Tile Maps Documentation",
    "keywords": "Class RequestScreenChangeEventArgs Class to hold arguments for showing a new screen Inheritance Object RequestScreenChangeEventArgs Namespace : nickmaltbie.TileMaps.UI Assembly : cs.temp.dll.dll Syntax public class RequestScreenChangeEventArgs : EventArgs Fields newScreen String identifier for the new screen to load Declaration public string newScreen Field Value Type Description String"
  },
  "api/nickmaltbie.TileMaps.UI.ScreenChangeEventArgs.html": {
    "href": "api/nickmaltbie.TileMaps.UI.ScreenChangeEventArgs.html",
    "title": "Class ScreenChangeEventArgs | Tile Maps Documentation",
    "keywords": "Class ScreenChangeEventArgs Class to hold screen change in state Inheritance Object ScreenChangeEventArgs Namespace : nickmaltbie.TileMaps.UI Assembly : cs.temp.dll.dll Syntax public class ScreenChangeEventArgs : EventArgs Fields newScreen Name of the new screen being changed to Declaration public string newScreen Field Value Type Description String oldScreen Name of the previous screen shown Declaration public string oldScreen Field Value Type Description String"
  },
  "api/nickmaltbie.TileMaps.UI.ShowOnPlatform.html": {
    "href": "api/nickmaltbie.TileMaps.UI.ShowOnPlatform.html",
    "title": "Class ShowOnPlatform | Tile Maps Documentation",
    "keywords": "Class ShowOnPlatform Simple class to show an element on a specific runtime platform. Inheritance Object ShowOnPlatform Namespace : nickmaltbie.TileMaps.UI Assembly : cs.temp.dll.dll Syntax public class ShowOnPlatform : MonoBehaviour Fields showPlatform Declaration public RuntimePlatform showPlatform Field Value Type Description RuntimePlatform Methods Awake() Declaration public void Awake()"
  },
  "api/nickmaltbie.TileMaps.UI.TabPair.html": {
    "href": "api/nickmaltbie.TileMaps.UI.TabPair.html",
    "title": "Class TabPair | Tile Maps Documentation",
    "keywords": "Class TabPair Inheritance Object TabPair Namespace : nickmaltbie.TileMaps.UI Assembly : cs.temp.dll.dll Syntax public class TabPair Fields TabButton Declaration public Button TabButton Field Value Type Description Button TabContent Declaration public CanvasGroup TabContent Field Value Type Description CanvasGroup"
  },
  "api/nickmaltbie.TileMaps.UI.TabStrip.html": {
    "href": "api/nickmaltbie.TileMaps.UI.TabStrip.html",
    "title": "Class TabStrip | Tile Maps Documentation",
    "keywords": "Class TabStrip Inheritance Object TabStrip Namespace : nickmaltbie.TileMaps.UI Assembly : cs.temp.dll.dll Syntax public class TabStrip : MonoBehaviour Fields DefaultTab Declaration public Button DefaultTab Field Value Type Description Button TabCollection Declaration public TabPair[] TabCollection Field Value Type Description TabPair [] TabIconDefault Declaration public Sprite TabIconDefault Field Value Type Description Sprite TabIconPicked Declaration public Sprite TabIconPicked Field Value Type Description Sprite Properties CurrentTabIndex Declaration public int CurrentTabIndex { get; } Property Value Type Description Int32 Methods FindTabIndex(Button) Declaration protected int? FindTabIndex(Button tabButton) Parameters Type Name Description Button tabButton Returns Type Description Nullable < Int32 > PickTab(Int32) Declaration public void PickTab(int index) Parameters Type Name Description Int32 index SetTabState(Int32, Boolean) Declaration protected void SetTabState(int index, bool picked) Parameters Type Name Description Int32 index Boolean picked Start() Declaration public void Start()"
  },
  "api/nickmaltbie.TileMaps.UI.Text.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Text.html",
    "title": "Namespace nickmaltbie.TileMaps.UI.Text | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.TileMaps.UI.Text Classes TMProUGUIHyperlinks This class handles basic link color behavior, supports also underline (static only) Does not support strike-through, but can be easily implemented in the same way as the underline forum post reference - https://forum.unity.com/threads/textmeshpro-hyperlinks.1091296/ https://github.com/EpsilonD3lta/UnityUtilities/blob/master/Scripts/Runtime/TMProUGUIHyperlinks.cs"
  },
  "api/nickmaltbie.TileMaps.UI.Text.TMProUGUIHyperlinks.html": {
    "href": "api/nickmaltbie.TileMaps.UI.Text.TMProUGUIHyperlinks.html",
    "title": "Class TMProUGUIHyperlinks | Tile Maps Documentation",
    "keywords": "Class TMProUGUIHyperlinks This class handles basic link color behavior, supports also underline (static only) Does not support strike-through, but can be easily implemented in the same way as the underline forum post reference - https://forum.unity.com/threads/textmeshpro-hyperlinks.1091296/ https://github.com/EpsilonD3lta/UnityUtilities/blob/master/Scripts/Runtime/TMProUGUIHyperlinks.cs Inheritance Object TMProUGUIHyperlinks Namespace : nickmaltbie.TileMaps.UI.Text Assembly : cs.temp.dll.dll Syntax public class TMProUGUIHyperlinks : MonoBehaviour Methods Awake() Declaration public void Awake() GetLinkIndex() Declaration public int GetLinkIndex() Returns Type Description Int32 LateUpdate() Declaration public void LateUpdate() OnPointerDown(PointerEventData) Declaration public void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData OnPointerUp(PointerEventData) Declaration public void OnPointerUp(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData ResetLinkColor(Int32, List<Color32[]>) Declaration public void ResetLinkColor(int linkIndex, List<Color32[]> startColors) Parameters Type Name Description Int32 linkIndex List < Color32 []> startColors SetLinkColor(Int32, Color32) Declaration public List<Color32[]> SetLinkColor(int linkIndex, Color32 color) Parameters Type Name Description Int32 linkIndex Color32 color Returns Type Description List < Color32 []>"
  },
  "api/nickmaltbie.TileMaps.UI.UIManager.html": {
    "href": "api/nickmaltbie.TileMaps.UI.UIManager.html",
    "title": "Class UIManager | Tile Maps Documentation",
    "keywords": "Class UIManager Class to manager various UI Screens Inheritance Object UIManager Namespace : nickmaltbie.TileMaps.UI Assembly : cs.temp.dll.dll Syntax public class UIManager : MonoBehaviour Fields initialScreen Index of the first screen to show Declaration public int initialScreen Field Value Type Description Int32 inputActions Input actions used by UI Module Declaration public InputActionAsset inputActions Field Value Type Description InputActionAsset Instance Globally created instance of the UIManager Declaration public static UIManager Instance Field Value Type Description UIManager maxScreenHistory Maximum number of screen changes that can be saved Declaration public int maxScreenHistory Field Value Type Description Int32 screenPrefabs Various screens to add into the scene Declaration public List<GameScreen> screenPrefabs Field Value Type Description List < GameScreen > Properties CurrentScreen Name of the current screen being displayed Declaration public string CurrentScreen { get; } Property Value Type Description String Methods ClearHistory() Clear out history of all visited screens (except for current screen) Declaration public void ClearHistory() DestorySelf() Declaration public IEnumerator DestorySelf() Returns Type Description IEnumerator HandleScreenRequest(Object, RequestScreenChangeEventArgs) Handle a request to change screens Declaration public void HandleScreenRequest(object sender, RequestScreenChangeEventArgs eventArgs) Parameters Type Name Description Object sender sender of the event RequestScreenChangeEventArgs eventArgs arguments of screen change OnDestroy() Declaration public void OnDestroy() PreviousScreen(Object) Declaration public static void PreviousScreen(object sender) Parameters Type Name Description Object sender RequestNewScreen(Object, String) Requests a new screen to be shown Declaration public static void RequestNewScreen(object sender, string name) Parameters Type Name Description Object sender Object sending the event String name Name of new screen to show SetScreen(String) Sets this screen to be displayed Declaration public void SetScreen(string screenName) Parameters Type Name Description String screenName Name of the screen to display Start() Declaration public void Start() Events RequestScreenChange Events for requesting a screen change Declaration public static event EventHandler<RequestScreenChangeEventArgs> RequestScreenChange Event Type Type Description EventHandler < RequestScreenChangeEventArgs > ScreenChangeOccur Events for when a screen change has ocurred Declaration public static event EventHandler<ScreenChangeEventArgs> ScreenChangeOccur Event Type Type Description EventHandler < ScreenChangeEventArgs >"
  },
  "index.html": {
    "href": "index.html",
    "title": "Tile Maps | Tile Maps Documentation",
    "keywords": "Tile Maps This project will generate various types of tile maps including square and hexagon maps and allow for spawning in game objects based off of these patterns. Includes various features such as path finding. The Tile Maps project is hosted on GitHub at https://github.com/nicholas-maltbie/TileMaps An interactive version demonstrating the TileMaps project is hosted at https://nickmaltbie.com/TileMaps/ . Series of videos describing how pathfinding works How Pathfinding Works - Introduction Development If you want to help with the project, feel free to make some changes and submit a PR to the repo. This library was developed as part of the Falling Parkour Project here - https://github.com/nicholas-maltbie/FallingParkour This project is developed using Unity Release 2021.1.19f1 . Install this version of Unity from Unity Hub using this unity hub link unityhub://2021.1.19f1/d0d1bb862f9d. When working with the project, make sure to setup the .githooks if you want to edit the code in the project. In order to do this, use the following command to reconfigure the core.hooksPath for your repository git config --local core.hooksPath .githooks Documentation Documentation on the project and scripting API is found at https://nickmaltbie.com/TileMaps/docs/ for the latest version of the codebase. To view the documentation from a local build of the project install DocFX , use the following command from the root of the repo. docfx Documentation/docfx.json --serve The documentation for the project is stored in the folder /Documentation and can be modified and changed to update with the project. This documentation project is inspired by the project by Norman Erwan's DocFxForUnity License This is an open source project licensed under a MIT License . Feel free to use a build of the project for your own work. If you see an error in the project or have any suggestions, write an issue or make a pull request, I'll happy include any suggestions or ideas into the project."
  },
  "manual/introduction.html": {
    "href": "manual/introduction.html",
    "title": "Introduction to Tile Maps | Tile Maps Documentation",
    "keywords": "Introduction to Tile Maps The Tile Maps project is a basic example and proof of concept to create various types of tile maps that can be manipulated in a generic manner. A Tile Map in this project refers to a collection of objects that can be collected, referenced, and searched in some organized manner. The basic assumption of any tile map is that it saves values based on a given key lookup and that each key will have a set of neighbors that are adjacent to it. An example of this would be a square grid where each cell in the grid has a coordinate linked to it and neighbors defined by the squares sharing a side. This project by default includes: Square Grids Hexagon Grids Generic Path Finding Animated Path Finding Demo Organization of Project The project is organized into a few namespaces: nickmaltbie.TileMaps.Common for common code for managing any tile map nickmaltbie.TileMaps.Example for example code used in the demo nickmaltbie.TileMaps.Hexagon for hexagon based tile maps nickmatlbie.TileMaps.Pathfinding for any path finding code nickmaltbie.TileMaps.Square for square based tile maps."
  }
}